# Upstream servers
upstream web_backend {
    server web:3000;
    keepalive 32;
}

upstream api_backend {
    server api:8000;
    keepalive 32;
}

# Rate limiting
limit_req_status 429;
limit_conn_status 429;

# Main server block
server {
    listen 80;
    server_name _;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), camera=(), microphone=(), payment=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Hide server information
    server_tokens off;

    # Emergency pages - CRITICAL PATH with aggressive caching
    location /e/ {
        # Rate limiting - generous for emergency use
        limit_req zone=emergency burst=10 nodelay;

        # Caching
        proxy_cache emergency_cache;
        proxy_cache_valid 200 1m;
        proxy_cache_valid 404 10s;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;

        # Cache headers
        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=60, s-maxage=300, stale-while-revalidate=600" always;

        # Performance optimizations
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Proxy to web app
        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;

        # Timeouts - optimized for emergency access
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # API endpoints
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;

        # No caching for API endpoints
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        # Proxy to API
        proxy_pass http://api_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;

        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # API direct access (for backward compatibility)
    location ~ ^/(auth|health|stats|docs|openapi\.json)(/.*)?$ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;

        # Auth endpoints need stricter rate limiting
        location ~ ^/auth/ {
            limit_req zone=auth burst=3 nodelay;
        }

        # No caching
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;

        # Proxy to API
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
    }

    # Static assets from Next.js
    location /_next/static/ {
        proxy_cache static_cache;
        proxy_cache_valid 200 1d;
        proxy_cache_valid 404 1m;
        
        add_header Cache-Control "public, max-age=31536000, immutable" always;
        add_header X-Cache-Status $upstream_cache_status always;

        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
    }

    # Next.js API routes
    location /api/ {
        proxy_cache off;
        add_header Cache-Control "no-cache" always;

        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
    }

    # Root and other pages
    location / {
        # Light caching for main site
        proxy_cache static_cache;
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating;
        
        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=300" always;

        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;

        # Fallback for client-side routing
        try_files $uri $uri/ @fallback;
    }

    # Fallback for client-side routing
    location @fallback {
        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(log|conf)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # Monitoring endpoint for cache stats
    location /nginx-cache-status {
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        content_by_lua_block {
            local cache_status = ngx.var.upstream_cache_status or "MISS"
            ngx.say("Cache Status: " .. cache_status)
            ngx.say("Server: " .. ngx.var.server_name)
            ngx.say("Time: " .. ngx.http_time(ngx.time()))
        }
    }
}

# Additional server block for HTTPS (if SSL certificates are available)
# server {
#     listen 443 ssl http2;
#     server_name vitaltags.com www.vitaltags.com;
#     
#     ssl_certificate /etc/ssl/certs/vitaltags.crt;
#     ssl_certificate_key /etc/ssl/private/vitaltags.key;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:MozTLS:10m;
#     ssl_session_tickets off;
#     
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
#     
#     # Include the same location blocks as the HTTP server
# }