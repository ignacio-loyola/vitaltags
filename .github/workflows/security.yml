name: Security Scans

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # SAST (Static Application Security Testing)
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python,javascript"

  # Python Security Scan
  python-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          pip install -e .

      - name: Run Safety (dependency vulnerability scanner)
        run: |
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Run Bandit (security linter)
        run: |
          bandit -r app -f json -o bandit-report.json || true
          bandit -r app || true

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json app/ || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            apps/api/safety-report.json
            apps/api/bandit-report.json
            apps/api/semgrep-report.json

  # JavaScript Security Scan
  javascript-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          pnpm audit --audit-level=moderate --json > npm-audit-report.json || true
          pnpm audit --audit-level=moderate || true

      - name: Run ESLint security rules
        run: |
          pnpm lint --format=json --output-file=eslint-security-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: javascript-security-reports
          path: |
            apps/web/npm-audit-report.json
            apps/web/eslint-security-report.json

  # Container Security Scan
  container-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t vitaltags-${{ matrix.component }}:latest ./apps/${{ matrix.component }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vitaltags-${{ matrix.component }}:latest'
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.component }}.sarif'
          category: 'container-${{ matrix.component }}'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'vitaltags-${{ matrix.component }}:latest'
          format: sarif
          output-file: 'grype-${{ matrix.component }}.sarif'

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'grype-${{ matrix.component }}.sarif'
          category: 'grype-${{ matrix.component }}'

  # License Compliance Check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Python licenses
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: apps/api/pyproject.toml
          format: json
          output: python-licenses.json

      - name: Set up Node.js for license check
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Enable Corepack
        run: corepack enable

      - name: Install web dependencies
        working-directory: apps/web
        run: pnpm install --frozen-lockfile

      - name: Check JavaScript licenses
        working-directory: apps/web
        run: |
          npx license-checker --json --out ../../javascript-licenses.json || true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.json
            javascript-licenses.json

  # Security Summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [sast-scan, python-security, javascript-security, container-security, license-check]
    if: always()

    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v4

      - name: Create security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Scans Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SAST (Static Analysis)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Python Security (Safety, Bandit, Semgrep)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ JavaScript Security (npm audit, ESLint)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container Security (Trivy, Grype)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY